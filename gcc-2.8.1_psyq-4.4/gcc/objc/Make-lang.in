# Top level makefile fragment for GNU Objective-C
#   Copyright (C) 1997 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.

# Extra flags to pass to recursive makes.
OBJC_FLAGS_TO_PASS = \
	"OBJC_FOR_BUILD=$(OBJC_FOR_BUILD)" \
	"OBJCFLAGS=$(OBJCFLAGS)" \
	"OBJC_FOR_TARGET=$(OBJC_FOR_TARGET)" \

# Actual names to use when installing a native compiler.
#OBJC_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`

# Actual names to use when installing a cross-compiler.
#OBJC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`


# Define the names for selecting Objective-C in LANGUAGES.
OBJC objc: cc1obj objc-runtime
OBJECTIVE-C objective-c: cc1obj objc-runtime

# Tell GNU make to ignore these if they exist.
.PHONY: objective-c objc ObjC

# C common object files required by Objective C.
OBJC_CCOMMON = $(srcdir)/c-lex.o $(srcdir)/c-pragma.o \
 $(srcdir)/c-decl.o $(srcdir)/c-typeck.o $(srcdir)/c-convert.o \
 $(srcdir)/c-aux-info.o $(srcdir)/c-common.o $(srcdir)/c-iterate.o

# Language-specific object files for Objective C.
OBJC_OBJS = $(srcdir)/objc/objc-parse.o $(srcdir)/objc/objc-act.o

cc1obj: $(P) $(OBJC_OBJS) $(OBJC_CCOMMON) $(OBJS) $(BC_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJC_OBJS) $(OBJS) \
		$(OBJC_CCOMMON) $(BC_OBJS) $(LIBS)

# Objective C language specific files.

$(srcdir)/objc/objc-parse.o : $(srcdir)/objc/objc-parse.c \
   $(CONFIG_H) $(TREE_H) \
   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/input.h \
   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-parse.c -o $(srcdir)/objc/objc-parse.o

$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y
	cd $(srcdir); $(BISON) $(BISONFLAGS) \
	$(srcdir)/objc/objc-parse.y -o $(srcdir)/objc/objc-parse.c

$(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in
	echo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y
	sed -e "/^ifc$$/,/^end ifc$$/d" \
	  -e "/^ifobjc$$/d" -e "/^end ifobjc$$/d" \
	  $(srcdir)/c-parse.in >>tmp-objc-prs.y
	$(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc/objc-parse.y

$(srcdir)/objc/objc-act.o : $(srcdir)/objc/objc-act.c \
   $(CONFIG_H) $(TREE_H) $(RTL_H) \
   $(srcdir)/c-tree.h $(srcdir)/c-lex.h \
   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h \
   $(srcdir)/function.h $(srcdir)/c-parse.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \
	-c $(srcdir)/objc/objc-act.c -o $(srcdir)/objc/objc-act.o

objc-runtime: objc-headers libobjc.a

# copy objc header files into build directory
objc-headers: stmp-fixinc
	if [ -d include ]; then true; else mkdir include; fi
	if [ -d objc ]; then true; else mkdir objc; fi
	thisdir1=`pwd`; \
	srcdir1=`cd $(srcdir); pwd`; \
	cd objc; \
	if [ -f $${srcdir1}/objc/Makefile ]; then \
	  $(MAKE) -f $${srcdir1}/objc/Makefile copy-headers \
	  srcdir=$${srcdir1} tooldir=$(tooldir) \
	  AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
	  GCC_FOR_TARGET="$${thisdir1}/xgcc -B$${thisdir1}/" \
	  GCC_CFLAGS="$(GCC_CFLAGS)" incinstalldir=$${thisdir1}/include; \
	fi
	touch objc-headers

# Objective C runtime library specific files.

OBJC_O = $(srcdir)/objc/hash.o $(srcdir)/objc/sarray.o \
	$(srcdir)/objc/class.o $(srcdir)/objc/sendmsg.o \
	$(srcdir)/objc/init.o $(srcdir)/objc/archive.o \
	$(srcdir)/objc/encoding.o $(srcdir)/objc/selector.o \
	$(srcdir)/objc/objects.o $(srcdir)/objc/misc.o \
	$(srcdir)/objc/NXConstStr.o $(srcdir)/objc/Object.o \
	$(srcdir)/objc/Protocol.o $(srcdir)/objc/nil_method.o \
	$(srcdir)/objc/thr.o $(srcdir)/objc/linking.o \
	$(srcdir)/objc/$(OBJC_THREAD_FILE).o

$(srcdir)/objc/hash.o: $(srcdir)/objc/hash.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/hash.c -o $@
$(srcdir)/objc/sarray.o: $(srcdir)/objc/sarray.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/sarray.c -o $@
$(srcdir)/objc/class.o: $(srcdir)/objc/class.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/class.c -o $@
$(srcdir)/objc/sendmsg.o: $(srcdir)/objc/sendmsg.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/sendmsg.c -o $@
$(srcdir)/objc/init.o: $(srcdir)/objc/init.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/init.c -o $@
$(srcdir)/objc/archive.o: $(srcdir)/objc/archive.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/archive.c -o $@
$(srcdir)/objc/encoding.o: $(srcdir)/objc/encoding.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/encoding.c -o $@
$(srcdir)/objc/selector.o: $(srcdir)/objc/selector.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/selector.c -o $@
$(srcdir)/objc/objects.o: $(srcdir)/objc/objects.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/objects.c -o $@
$(srcdir)/objc/misc.o: $(srcdir)/objc/misc.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/misc.c -o $@
$(srcdir)/objc/NXConstStr.o: $(srcdir)/objc/NXConstStr.m
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/NXConstStr.m -o $@
$(srcdir)/objc/Object.o: $(srcdir)/objc/Object.m
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/Object.m -o $@
$(srcdir)/objc/Protocol.o: $(srcdir)/objc/Protocol.m
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/Protocol.m -o $@
$(srcdir)/objc/thr.o: $(srcdir)/objc/thr.h $(srcdir)/objc/thr.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/thr.c -o $@
$(srcdir)/objc/$(OBJC_THREAD_FILE).o: $(srcdir)/objc/$(OBJC_THREAD_FILE).c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/$(OBJC_THREAD_FILE).c -o $@
$(srcdir)/objc/nil_method.o: $(srcdir)/objc/nil_method.c
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/nil_method.c -o $@
$(srcdir)/objc/linking.o: $(srcdir)/objc/linking.m
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \
	-c $(srcdir)/objc/linking.m -o $@

# Build the Objective C runtime library.
libobjc.a: cc1obj specs stmp-int-hdrs libgcc2.ready \
 $(USE_COLLECT2) $(EXTRA_PARTS) $(OBJC_O)
	-rm -f libobjc.a
	$(AR) $(AR_FLAGS) libobjc.a $(OBJC_O)
	-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi


# Build hooks:

objc.all.build:
objc.all.cross:
objc.start.encap:
objc.rest.encap:

objc.info:
objc.dvi:


# Install hooks:
# cc1obj is installed elsewhere as part of $(COMPILERS).

# Nothing to do here.
objc.install-normal: installdirs
	-if [ -f libobjc.a ] ; then \
	  rm -f $(libsubdir)/libobjc.a; \
	  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \
	  if $(RANLIB_TEST) ; then \
	    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \
	  chmod a-x $(libsubdir)/libobjc.a; \
	else true; fi


objc.install-common:

objc.install-info:

objc.install-man:

objc.uninstall:

# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
objc.mostlyclean:
	-rm -f tmp-objc-prs.y
	-rm -f objc/*$(objext) objc/xforward objc/fflags
	-rm -f libobjc.a
objc.clean: objc.mostlyclean
	-rm -rf objc-headers
objc.distclean:
	-rm -f objc/Makefile objc/Make-host objc/Make-target
	-rm -f objc/config.status objc/config.cache
	-rm -f objc-parse.output
objc.extraclean:
objc.maintainer-clean:
	-rm -f objc/objc-parse.y
	-rm -f objc/objc-parse.c objc/objc-parse.output


# Stage hooks:

objc.stage1:
	-mv objc/*$(objext) stage1/objc
	-mv cc1obj$(exeext) stage1
	-mv libobjc.a stage1
objc.stage2:
	-mv objc/*$(objext) stage2/objc
	-mv cc1obj$(exeext) stage2
	-mv libobjc.a stage2
objc.stage3:
	-mv objc/*$(objext) stage3/objc
	-mv cc1obj$(exeext) stage3
	-mv libobjc.a stage3
objc.stage4:
	-mv objc/*$(objext) stage4/objc
	-mv cc1obj$(exeext) stage4
	-mv libobjc.a stage4


# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
objc.distdir:
